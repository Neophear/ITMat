using ITMat.Core.DTO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ITMat.UI.WindowsApp.Services.MockService
{
    public class MockLoanService : ILoanService
    {
        private readonly List<LoanDTO> loans;

        public MockLoanService()
        {
            loans = new List<LoanDTO>();

            for (int i = 1; i <= 10; i++)
            {
                var startDate = DateTime.Today.AddMonths(i - 3);
                var endDate = startDate.AddDays(30);

                var loan = new LoanDTO
                {
                    Id = i,
                    DateFrom = startDate,
                    DateTo = endDate,
                    EmployeeId = 1,
                    Note = "Autogenerated Loan"
                };

                var itemLines = new List<LoanLineItemDTO>(i);

                for (int j = 0; j < i; j++)
                {
                    itemLines.Add(new LoanLineItemDTO
                    {
                        Id = i * j,
                        PickedUp = startDate,
                        Returned = i % 2 == 0 ? (DateTime?)startDate.AddDays(1) : null
                    });
                }

                loan.Active = itemLines.Any(l => l.Returned == null);

                loan.ItemLines = itemLines;

                loans.Add(loan);
            }
        }

        public async Task<IEnumerable<LoanDTO>> GetEmployeeLoansAsync(int employeeId)
        {
            await Task.Delay(200);
            return loans.Where(l => l.EmployeeId == employeeId);
        }

        public async Task<LoanDTO> GetLoanAsync(int id)
        {
            await Task.Delay(200);
            return loans.FirstOrDefault(l => l.Id == id);
        }

        public async Task<IEnumerable<LoanDTO>> GetLoansAsync()
        {
            await Task.Delay(200);
            return loans;
        }
    }
}